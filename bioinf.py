
def scan(sequence):
    index_starts, result = [index for index in range(len(sequence)) if sequence.startswith("ATG", index)], []
    for index in index_starts:
        string = ""; next_codon = "ATG"; ind = index
        while (next_codon != "TAA") and (next_codon != "TGA") and (next_codon != "TAG") and (ind < len(sequence)):
            next_codon = sequence[ind:ind+3]
            string += next_codon
            ind += 3
        result.append(string)
    return result

def translate(reading_frames, aminos):
    result = []
    for index in range(len(reading_frames)):
        string = ""
        lst = [reading_frames[index][i:i+3] for i in range(0,len(reading_frames[index]),3)]
        for k in range(len(lst)):
            for i, j in aminos.items():
                lst[k] = lst[k].replace(i, j)
            string += lst[k]
        result.append(string)
    return result

aminos = {
        "AGG": "R", "AGA": "R", "AGC": "S", "AGT": "S",       # arginine, serine 
        "AAG": "K", "AAA": "K", "AAC": "N", "AAT": "N",       # lysine, asparagine 
        "ACG": "T", "ACA": "T", "ACC": "T", "ACT" : "T",      # threonine
        "ATG": "M", "ATA": "I", "ATC": "I", "ATT": "I",       # methionine (start), isoleucine

        "CGG": "R", "CGA": "R", "CGC": "R", "CGT": "R",       # arginine
        "CAG": "Q", "CAA": "Q", "CAC": "H", "CAT": "H",       # glutamine, histidine
        "CCG": "P", "CCA": "P", "CCC": "P", "CCT": "P",       # proline
        "CTG": "L", "CTA": "L", "CTC": "L", "CTT": "L",       # leucine

        "TGG": "W", "TGA": "stop", "TGC": "C", "TGT": "C",    # tryptophan, stop, cysteine
        "TAG": "stop", "TAA": "stop", "TAC": "Y", "TAT": "Y", # stop, stop, tyrosine
        "TCG": "S", "TCA": "S", "TCC": "S", "TCT": "S",       # serine
        "TTG": "L", "TTA": "L", "TTC": "F", "TTT": "F",       # leucine, phenylalanine

        "GGG": "G", "GGA": "G", "GGC": "G", "GGT": "G",       # glycine
        "GAG": "E", "GAA": "E", "GAC": "D", "GAT": "D",       # glutamate, aspartate
        "GCG": "A", "GCA": "A", "GCC": "A", "GCT": "A",       # alanine
        "GTG": "V", "GTA": "V", "GTC": "V", "GTT": "V"        # valine
    }

sequence = (
"GACCTTAAATATATCGAGGTGGCTAATTGATGTATAATAATTTACAAAATTATTCTTCTATGCTACAGAG"
"CTACAATTCAATTTACAGTAGTAAATATGAGGGCCTTCTTAAGGAACCAGAAATATGAGGATATGCACAA"
"TATTATTCACATTTTACAGATCAGAAAATTGAGGCACAGATTAAGTAACTTCCCAAGGCTACCAGGCATT"
"CTAGCTCCAGAAACTGTGCTCTTACCATTCTGCTACAAGGTATTTCGAAAAAAAGAAAAAGTAAAAAGAA"
"GTCAAAAGGCAACAGAGTTCATTGATTATTCCATAGAACAGTCACACCATGCAATTCTCACACCCTTGCA"
"GACACACTTGACCATGAAAGGTTCCTCAATGAAATGTTCCTCATTATCTTCAGAAGCCATATTATTCACA"
"TTGACTTTGCAGTTAACTCAGACCCTAGGTCTGGAATGCTGTCTTCTCTACTTATCCAAAACTATACATC"
"CACAGATCATATAAACTCTCAGCCCTGCTGCAAAGCCTTTCCAGAAAAATAAAAATGGTTGAAAAGGCAA"
"TTCTGCTACCAATGACTGTTTAAGCCCAGCCAAGTAACTGAACCATTCCAACTTCAATTTACTTATGAAA"
"AGAATTTGATGATGTAGGAGGTTATTTCAATTCTAAAATACAAACCCATGTTGATCTTTCTCAATCTTGA"
"ACTCATAGATTATTATCTATTATCTCAATTTAGTTTGTTATTTATCCTAGTGGGCCATTAAAAACTACCA"
"CATGTGTTTCTGTCTCTCCATTAGTCAATAACTAAACTAACGAGCAATTAGTAAGCCATGTGCCAGATGC"
"TCCGCTAGGCACCAGAGGGATAAAAACAATACTTATAGTATACCACTAATTTTCGCTTAGTAACTAGTGA"
"AATGTTCAAGTCATGCCTGAGTCAAGAGTTGAGGAGACATTACAATGTGTAATGGAAACCAAGGAAAGTG"
"AAACTTTGGATAAGTGGGGACTAGTGTATTTATATATTTAATTGATTTCTGACTCTATCATTGGCCTCCA"
"AACACAGATTGTGTTTTTCTTTGGTTTTGTTTTCTTCACTATGGGATCTTCTGTGCCCAGCACAGTGCCT"
"GACACATAGAAAACAATCAAATATTTGCTGAATAAATGATTAAAAAATCAGAGAACTTTCCCATTCTGTT"
"TGGATCTATAGAACATCCAGAGTAAGTGATGAGGGCCTCTGCATTTATATGCGCTTAAATTAAGATTATG"
"TGAGAAAAGTTTAAAGACACTTAGTAGAGTGATTTTGAAATATAGTAAACACTTGGAAATGGTGGTGCTT"
"TAAAAAGATATTAATAGATAATATGAAAATCTCCATCTCAAAAATAATGCATAAACTATTTAAAGGAAAA"
"TCACATCTCCAGGCTTTCAATGTTTGTTCATTACTTTTTCATATATTTTTACCATCTGCTGAAGGCAGTC"
"ATATCAAAGGGTAAAGAAAGATGGGAGGAAAACTCAGTAAGAATTATATTAGTCTGTTTGCAAAGTAGAA"
"AAAGATTCTCATCACTCAACCTTATGAGCAGGAAGAGGGAAGGCTGTTTGAGAACCATTTACTTAGCAGA"
"ACCACATATTTTAGACACTTCCCTGCATTAACTGCACAAACAATATGTTTGCAAACTTGTTAGATCAACC"
"TCCAACAACGACACATTCAGGAGTTAAATATTTTTCATCAAACATTGGATTTTTCCTTAACGCTAGAGAT"
"TGCTACAAATCTTCTGAAGGGTCTCAATGGCTTCAGGCTAAGAAGAGATTTCTCCCTGTTATAAGCAGCA"
"AGACAAATTAGCCATTTCACTCTCAAACTTCACTAATGATCACATTCTTTCCAAAAGGAACTCTAGAAGA"
"CCAAATGCCCCGAGTTAAGAACATCAAAACTAACCATCTGAAGAAACTTCCCAAGTGTAAGACTCTGCCA"
"TTAAAACATTACCGAGAGGGGACTCAAACAGTCTTTCTTCCTTTGTCGTGTTTCTTGCTCCCAGACCAAG"
"GCACTGACGACAGTACTGATACATAATTTAAAAGCACACTCCCTTCCACTTTGTAATACCAGAACTCTAA"
"TTGGACACCCTGAAGCTTAGGACTACCAGCCATACAAATAGTAAACTCTGTCCACGATTCACTCATCTGT"
"GTATTTTCTATAGATGTTTACTAGGCGTTTGTTATATAAAAATACCCCGGCCAGGCACGGTGGCTCACGC"
"CTGTAATCCCAGCACTTTGGGAGGTGGGTGGATCACCTGAGGTCGGGAGTTCGAGACCAGCCTGACCAGC"
"ATGGTGGAACCCCCATCTCTACTAAAAACACAAAAAATTAGCCGGGCGTGGTGGCACATGCCTGTAATCC"
"CAGCTACTCAGGAGGCTGAGGCGGAGAATTGCTTGAACCCGGAAGGTGGAGGTTGCGGTGAGCTGAGATT"
"GCACTATTGCACTCCAGCCTGGGCAACAGGAGTAAAACTCCCCCCCACCCAAAAAA")

reading_frames = scan(sequence)
print("Рамки считывания: ", reading_frames)
print("Белковая последовательность: ", translate(reading_frames, aminos))
